class Heap(list):
    def __init__(self, init_list = []):
        super().__init__(init_list)

    @staticmethod
    def left(i: int) -> int:
        return 2 * i + 1

    @staticmethod
    def right(i: int) -> int:
        return 2 * i + 2

    def max_heapify(self, i: int):
        l = self.left(i)
        r = self.right(i)
        H = len(self)
        # ????????????????????????????????§???????????§????????????????????¶
        if l < H and self[l] > self[i]:
            largest = l
        else:
            largest = i
        if r < H and self[r] > self[largest]:
            largest = r
        if largest != i:  # i ???????????????????????§????????´???
            # A[i] ??¨ A[largest] ?????????
            tmp = self[i]
            self[i] = self[largest]
            self[largest] = tmp
            self.max_heapify(largest)  # ?????°??????????????????

    def build_max_heap(self):
        for i in range(len(self)//2, -1, -1):
            self.max_heapify(i)

n = int(input())
xs = Heap([int(i) for i in input().split()])
xs.build_max_heap()
print(" " + " ".join([str(i) for i in xs] ))