#include <bits/stdc++.h>
using namespace std;
const double pi = acos(-1);
const double eps = 1e-6;
const long long INF = 0x3f3f3f3f3f3f3f3fll;
const int inf = 0x3f3f3f3f;
const int mod = 1e9 + 7;
const int maxn = 3e5 + 100;
int cnt1, cnt2, ans1[maxn], ans2[maxn], tot1, tot2;
struct node {
  int a, b, num;
  bool operator<(const node& z) const { return b < z.b; }
} x[maxn];
struct node2 {
  int a, b, num;
  bool operator<(const node2& z) const { return b < z.b; }
} y[maxn];
void debug() {}
void solve() {
  int n;
  scanf("%d", &n);
  int a, b;
  for (int i = 0; (i) < (n); i++) {
    scanf("%d%d", &a, &b);
    if (a < b) x[cnt1].num = i + 1, x[cnt1].a = a, x[cnt1++].b = b;
    if (a > b) y[cnt2].num = i + 1, y[cnt2].a = a, y[cnt2++].b = b;
  }
  sort(x, x + cnt1);
  sort(y, y + cnt2);
  int now = x[0].b;
  if (cnt1) ans1[tot1++] = x[0].num;
  for (int i = 1; (i) <= (cnt1 - 1); i++) {
    if (x[i].a < now) {
      ans1[tot1++] = x[i].num;
      now = x[i].b;
    }
  }
  now = y[0].b;
  if (cnt2) ans2[tot2++] = y[0].num;
  for (int i = 1; (i) <= (cnt2 - 1); i++) {
    if (y[i].a > now) {
      ans2[tot2++] = y[i].num;
      now = y[i].b;
    }
  }
  if (tot1 > tot2) {
    printf("%d\n", tot1);
    for (int i = 0; (i) < (tot1); i++) printf("%d ", ans1[i]);
  } else {
    printf("%d\n", tot2);
    for (int i = 0; (i) < (tot2); i++) printf("%d ", ans2[i]);
  }
}
int main() {
  solve();
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  return 0;
}
