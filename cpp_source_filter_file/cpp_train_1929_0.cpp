#include <bits/stdc++.h>
using namespace std;
int main() {
  ios_base::sync_with_stdio(false);
  cout.precision(12);
  long long px, py, vx, vy, a, b, c, d;
  cin >> px >> py >> vx >> vy >> a >> b >> c >> d;
  long double ans1 = 0.0, ans2 = 0.0;
  ans1 = (b * vx);
  ans2 = (b * vy);
  ans1 = ans1 / sqrt(vx * vx + (vy * vy));
  ans2 = ans2 / sqrt(vx * vx + (vy * vy));
  ans1 += px;
  ans2 += py;
  cout << ans1 << " " << ans2 << "\n";
  long long cclx, ccly, clx, cly;
  cclx = vy;
  ccly = vx;
  clx = vy;
  cly = vx;
  cclx = -cclx;
  ccly = -ccly;
  long double temp = (a / 2.0);
  ans1 = (temp * cclx);
  ans2 = (temp * ccly);
  ans1 = ans1 / sqrt(cclx * cclx + (ccly * ccly));
  ans2 = ans2 / sqrt(cclx * cclx + (ccly * ccly));
  ans1 += px;
  ans2 += py;
  cout << ans1 << " " << ans2 << "\n";
  temp = (c / 2.0);
  ans1 = (temp * cclx);
  ans2 = (temp * ccly);
  ans1 = ans1 / sqrt(cclx * cclx + (ccly * ccly));
  ans2 = ans2 / sqrt(cclx * cclx + (ccly * ccly));
  ans1 += px;
  ans2 += py;
  cout << ans1 << " " << ans2 << "\n";
  long long anty = -vy;
  long long antx = -vx;
  long double fans1 = antx * d;
  long double fans2 = anty * d;
  fans1 = fans1 / (sqrt((antx * antx) + (anty * anty)));
  fans2 = fans2 / (sqrt((antx * antx) + (anty * anty)));
  fans1 += ans1;
  fans2 += ans2;
  cout << fans1 << " " << fans2 << "\n";
  ans1 = c * clx;
  ans2 = c * cly;
  ans1 = ans1 / sqrt(clx * clx + (cly * cly));
  ans2 = ans2 / sqrt(clx * clx + (cly * cly));
  ans1 += fans1;
  ans2 += fans2;
  cout << ans1 << " " << ans2 << "\n";
  temp = (c / 2.0);
  ans1 = (temp * clx);
  ans2 = (temp * cly);
  ans1 = ans1 / sqrt(clx * clx + (cly * cly));
  ans2 = ans2 / sqrt(clx * clx + (cly * cly));
  ans1 += px;
  ans2 += py;
  cout << ans1 << " " << ans2 << "\n";
  temp = (a / 2.0);
  ans1 = (temp * clx);
  ans2 = (temp * cly);
  ans1 = ans1 / sqrt(clx * clx + (cly * cly));
  ans2 = ans2 / sqrt(clx * clx + (cly * cly));
  ans1 += px;
  ans2 += py;
  cout << ans1 << " " << ans2 << "\n";
}
