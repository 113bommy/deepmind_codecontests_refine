#include <bits/stdc++.h>
using namespace std;
char a[5], b[5];
int c[5], d[5], flag1, flag2;
bool judge() {
  if ((c[1] == 1 && c[2] == 3 && c[3] == 2 && c[4] == 0) ||
      (c[1] == 1 && c[2] == 3 && c[3] == 0 && c[4] == 2) ||
      (c[1] == 0 && c[2] == 3 && c[3] == 1 && c[4] == 2) ||
      (c[1] == 3 && c[2] == 0 && c[3] == 1 && c[4] == 2) ||
      (c[1] == 3 && c[2] == 2 && c[3] == 1 && c[4] == 0) ||
      (c[1] == 3 && c[2] == 2 && c[3] == 0 && c[4] == 1) ||
      (c[1] == 0 && c[2] == 2 && c[3] == 3 && c[4] == 1) ||
      (c[1] == 2 && c[2] == 0 && c[3] == 3 && c[4] == 1) ||
      (c[1] == 2 && c[2] == 1 && c[3] == 3 && c[4] == 0) ||
      (c[1] == 2 && c[2] == 1 && c[3] == 0 && c[4] == 3) ||
      (c[1] == 0 && c[2] == 1 && c[3] == 2 && c[4] == 3) ||
      (c[1] == 1 && c[2] == 0 && c[3] == 2 && c[4] == 3)) {
    flag1 = 1;
  } else
    flag1 = 2;
  if ((d[1] == 1 && d[2] == 3 && d[3] == 2 && d[4] == 0) ||
      (d[1] == 1 && d[2] == 3 && d[3] == 0 && d[4] == 2) ||
      (d[1] == 0 && d[2] == 3 && d[3] == 1 && d[4] == 2) ||
      (d[1] == 3 && d[2] == 0 && d[3] == 1 && d[4] == 2) ||
      (d[1] == 3 && d[2] == 2 && d[3] == 1 && d[4] == 0) ||
      (d[1] == 3 && d[2] == 2 && d[3] == 0 && d[4] == 1) ||
      (d[1] == 0 && d[2] == 2 && d[3] == 3 && d[4] == 1) ||
      (d[1] == 2 && d[2] == 0 && d[3] == 3 && d[4] == 1) ||
      (d[1] == 2 && d[2] == 1 && d[3] == 3 && d[4] == 0) ||
      (d[1] == 2 && d[2] == 1 && d[3] == 0 && d[4] == 3) ||
      (d[1] == 0 && d[2] == 1 && d[3] == 2 && d[4] == 3) ||
      (d[1] == 1 && d[2] == 0 && d[3] == 2 && d[4] == 3)) {
    flag2 = 1;
  } else
    flag2 = 2;
  if (flag1 == flag2)
    return true;
  else
    return false;
}
void solve() {
  for (int i = 1; i <= 4; ++i) {
    cin >> a[i];
    if (a[i] == 'X')
      c[i] = 0;
    else
      c[i] = a[i] - 'A' + 1;
  }
  for (int i = 1; i <= 4; ++i) {
    cin >> b[i];
    if (b[i] == 'X')
      d[i] == 0;
    else
      d[i] = a[i] - 'A' + 1;
  }
  if (judge())
    cout << "Yes" << endl;
  else
    cout << "No" << endl;
}
int main() {
  solve();
  return 0;
}
